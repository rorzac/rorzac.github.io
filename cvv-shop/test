<form id="paymentForm">
    <label for="amount">Сумма:</label>
    <input type="text" id="amount" name="amount" required><br>

    <label for="paymentMethod">Метод оплаты:</label>
    <select id="paymentMethod" name="paymentMethod" required>
        <option value="bitcoin">Биткоин</option>
        <option value="ethereum">Эфириум</option>
        <option value="monero">Монеро</option>
        <option value="litecoin">Лайткоин</option>
        <option value="usdt">USDT</option>
        <!-- Другие методы оплаты -->
    </select><br>

    <button id="toggleButton" type="submit">Отправить</button>
</form>

<div id="modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <p>Время истекает через: <span id="timer">1:00:00</span></p>
        <p>Номер кошелька: <span id="walletAddress"></span></p>
        <p>Сумма в криптовалюте: <span id="cryptoAmount"></span></p>
        <p>Сумма в долларах: <span id="usdAmount"></span></p>
        <button id="paymentButton">Оплатить</button>
    </div>
</div>



/* Стили для модального окна */
.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaaaaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
}




document.addEventListener("DOMContentLoaded", function() {
    // Определение переменных для элементов интерфейса
    var toggleButton = document.getElementById("toggleButton");
    var toggleableBlock = document.getElementById("toggleableBlock");
    var paymentForm = document.getElementById("paymentForm");
    var modal = document.getElementById("modal");
    var closeModal = document.getElementsByClassName("close")[0];
    var paymentButton = document.getElementById("paymentButton");

    // Определение кошельков
    var wallets = {
        bitcoin: "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2",
        ethereum: "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
        monero: "42fd7ef93f394346b4e6723583eb78a9524080e6",
        litecoin: "LUWPbpM43E2p7ZSh8cyTBEkvpHmr3cB8Ez",
        usdt: "0xdac17f958d2ee523a2206206994597c13d831ec7"
    };

    // Обработчик события клика для кнопки "toggleButton"
    toggleButton.addEventListener("click", function() {
        var computedStyle = window.getComputedStyle(toggleableBlock); 
        var displayPropertyValue = computedStyle.getPropertyValue("display");

        if (displayPropertyValue === "none") {
            toggleableBlock.style.display = "block"; 
        } else {
            toggleableBlock.style.display = "none"; 
        }
    });

    // Функция для конвертации долларов в криптовалюту
    async function convertToCrypto(paymentMethod, usdAmount) {
        if (paymentMethod === 'usdt') {
            return usdAmount;
        }
        try {
            const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${paymentMethod}&vs_currencies=usd`);
            const data = await response.json();
            const rate = data[paymentMethod].usd;
            const cryptoAmount = parseFloat(usdAmount) / rate;
            return cryptoAmount.toFixed(8); // Округляем до восьми знаков после запятой
        } catch (error) {
            console.error('Ошибка при получении курса обмена:', error);
            return null;
        }
    }

    // Обработчик события отправки формы
    paymentForm.addEventListener("submit", async function(event) {
        event.preventDefault();
        
        var usdAmount = document.getElementById("amount").value;
        var paymentMethod = document.getElementById("paymentMethod").value;

        if (parseFloat(usdAmount) < 100) {
            alert('Минимальная сумма для оплаты составляет 100 долларов.');
            return;
        }

        var walletAddress = wallets[paymentMethod];
        var cryptoAmount = await convertToCrypto(paymentMethod, usdAmount);

        if (cryptoAmount !== null) {
            document.getElementById("walletAddress").textContent = walletAddress;
            document.getElementById("cryptoAmount").textContent = cryptoAmount;
            document.getElementById("usdAmount").textContent = usdAmount + ' USD';

            modal.style.display = "block";
            startTimer(3600);
        } else {
            alert('Ошибка при конвертации суммы в криптовалюту. Пожалуйста, попробуйте снова.');
        }
    });

    // Обработчик события клика по кнопке "закрыть"
    closeModal.onclick = function() {
        modal.style.display = "none";
    }

    // Обработчик события клика по кнопке "оплатить"
    paymentButton.onclick = function() {
        alert("Мы проверяем данный платеж!");
        modal.style.display = "none";
    }

    // Обработчик события клика за пределами модального окна
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    // Функция запуска таймера
    function startTimer(duration) {
        var timer = duration, hours, minutes, seconds;
        var timerInterval = setInterval(function () {
            hours = Math.floor(timer / 3600);
            minutes = Math.floor((timer % 3600) / 60);
            seconds = timer % 60;

            hours = (hours < 10) ? "0" + hours : hours;
            minutes = (minutes < 10) ? "0" + minutes : minutes;
            seconds = (seconds < 10) ? "0" + seconds : seconds;

            document.getElementById("timer").textContent = hours + ":" + minutes + ":" + seconds;

            if (--timer < 0) {
                clearInterval(timerInterval);
                modal.style.display = "none";
            }
        }, 1000);
    }
});
